#
# file: cpusetup.s
#
# PowerPC Startup - initialize BATs, PCI, cache
# for UCOS-II
#
# Author: Ernie Price
# eprice@bitwise.net
#
#########################################################################

#include <ppc_asm.tmpl>

        .text

        .global bsp_Start
	.global int_disable
	.global enable_int
	.global SetDecrementer
	.global readtimer32
	.global readtime
	.global  CPU_IntDis
	.global  CPU_IntEn
	.global ExtIntHandle
	.global OSCtxSwHandle
	.global MachineCheck
	.global SystemManage
	.global DecIntHan

        .extern BAT_Enable
        .extern InitSRs
        .extern ClearBATs
        .extern CpDstBg, CpDstEn, CpSrcBg       # from the linker command file
        .extern Slim, Sbase                     # from the linker command file
        .extern msrvalue
        .extern main
	.extern EIEIntr
	.extern OSCtxSw

        .macro  LA reg,symbol
        lis     reg,%hiadj(symbol)
        addi    reg,reg,%lo(symbol)
        .endm
                
        .macro  LWI reg,symbol
        lis     reg,%hiadj(symbol)
        addi    reg,reg,%lo(symbol)
        .endm

	.equ ADDR, 0xff800100

.if 0
delay   macro
        lis     r3, 1
        mtctr   r3
dly\@:
        addi    r3,r3, 1
        bdnz    dly\@
        endm
.endif  

########################################################################
#
#       Enter here from cpuvecs.s
#
.text
. = 0x100
 .globl  _start
bsp_Start:
	nop
	mfmsr r3
	mtsrr1  r3
	sync
	isync
	#lis	r3,0xbbb
	#mtdec r3
	#isync

#ClearBSS:

#
#       Now clear the C uninitialized data area
#
	lis 	r3,Sbase@ha
	addi	r3,r3,Sbase@l
	lis 	r4,Send@ha
	addi 	r4,r4,Send@l

        cmplw   0, r3, r4 
        beq     6f 
 
        li      r0, 0 
5: 
        stw     r0, 0(r3) 
        addi    r3, r3, 4 
        cmplw   0, r3, r4 
        bne     5b 
6:

# note by HHTECH
#        LA      r3, Sbase               # r3: address
#        LWI     r5, Ssize               # r5: size to be cleared
#        li      r4, 0                   # fill value 
#        bl      LclMemset               # CLear Bss area

        #mfmsr   r3
	#xori	r3,r3,r3
        #ori     r3,r3,0xb002            # enable machine check and external exceptions
        #ori     r3,r3,0x3002            # enable machine check and external exceptions
	#isync
        #mtmsr   r3                      # 
	#sync

#
#       Now setup the stack and the Diab (also EABI) small data areas
#
        lis     1, 0x10                # initial stack at 1 mB - only temp til OS starts

	#mflr	r0
        #addis   13,0,_SDA_BASE_@ha    # Initialize r13 to sdata base, load top 16 bits
        lis   13,_SDA_BASE_@ha    # Initialize r13 to sdata base, load top 16 bits
        addi    13,13,_SDA_BASE_@l    # (provided by linker).load bottom 16 bits
        #addis   2,0,_SDA2_BASE_@ha    # Initialize r2 to sdata2 base
        lis   2,_SDA2_BASE_@ha    # Initialize r2 to sdata2 base
        addi    2,2,_SDA2_BASE_@l     # (provided by linker).

        mfmsr   3
        #stw     r3, msrvalue@sdax(r13)  # partial MSR value for task stack initialization
        lis     11, msrvalue@ha          # Get pointer to ready task TCB
        stw     3, msrvalue@l(11)


#
# Insert other initialization code here.
#
        bl      main
        b       .                       # in case main() returns

##############################################################
#$PAGE^L
#*********************************************************************************************************
#*                                      DISABLE/ENABLE INTERRUPTS
#*
#* Description : Disable/Enable interrupts by setting or clearing the global interrupt mask in the cpu
#*               status register.
#*
#*                    void  CPU_IntDis (void)
#*                           Set global interrupt mask bit on MSR
#*                           Return
#*
#*                    void  CPU_IntEn (void)
#*                           Clear global interrupt mask bit on MSR
#*                           Return
#*********************************************************************************************************


. = 0x200
MachineCheck:
        #ori r3,r3,0x51
        #lis r4,0xf001
        #lwz r3,0x0c04(r4)
	#xor r4,r4,r4
	#lis r4,0x50
	#stw r3,0(r4)
        xor r3,r3,r3
        ori r3,r3,0x56
        lis r4,0x50
        stw r3,0(r4)
	rfi

. = 0x300
MachineCheck1:
        xor r3,r3,r3
        ori r3,r3,0x57
        lis r4,0x50
        stw r3,0(r4)
	rfi

. = 0x400
MachineCheck2:
        mfsrr0  r27                     # fetch PC  (from normal interrupt)
        mfsrr1  r28                     # fetch MSR (from normal interrupt)
	mfmsr	r29
        xor r3,r3,r3
        ori r3,r3,0x58
        lis r4,0x50
	stw r3,0(r4)
        stw r27,4(r4)
        stw r28,8(r4)
        stw r29,0xc(r4)
	rfi

. = 0x500
ExtIntHandle:
        #xor r12,r12,r12
        #ori r12,r12,0x52
        #lis r11,0xc0
        #stw r12,0(r11)

	b	EIEIntr
	#lis	r3,EIEIntr@ha
	#ori	r3,r3,EIEIntr@l
        #mtlr    r3
        #blrl

. = 0x600
MachineCheck3:
        xor r3,r3,r3
        ori r3,r3,0x59
        lis r4,0x50
        stw r3,0(r4)
	rfi

. = 0x700
MachineCheck4:
        xor r3,r3,r3
        ori r3,r3,0x60
        lis r4,0x50
        stw r3,0(r4)
	rfi

. = 0x800
SystemManage:
        xor r3,r3,r3
        ori r3,r3,0x53
        lis r4,0x50
        stw r3,0(r4)
	rfi

. = 0x900
DecIntHan:
        #xor r3,r3,r3
        #ori r3,r3,0x61
        #lis r4,0x50
        #stw r3,0(r4)
	#rfi
	b DECIntr

. = 0xC00
OSCtxSwHandle:
        #xor r3,r3,r3
        #ori r3,r3,0x55
        #lis r4,0xa0
	#lwz r3,0(r4)
	#ori r3,r3,1
        #stw r3,0(r4)
	#rfi
	b	OSCtxSw

	#lis	r3,OSCtxSw@ha
	#ori	r3,r3,OSCtxSw@l
        #mtlr    r3
        #blrl
. = 0xd00
MachineCheck5:
        xor r3,r3,r3
        ori r3,r3,0x62
        lis r4,0x50
        stw r3,0(r4)
	rfi

. = 0xe00
MachineCheck6:
        xor r3,r3,r3
        ori r3,r3,0x63
        lis r4,0x50
        stw r3,0(r4)
	rfi

#if 0
EIEIntr:
        xor r12,r12,r12
        ori r12,r12,0x55
        lis r11,0xa0
        #lwz r12,0(r11)
        #ori r12,r12,1
        #lis r11,0xa0
        stw r12,0(r11)
	rfi
#endif
int_disable:
#if 10
    mfmsr   r3
    mfmsr   r5                              # Preparation for disabling interrupts (1)
    andi.   r5,r5,0x7fff                    # Preparation for disabling interrupts : set EE (bit #16) to '0' (2)
    sync
    isync
    mtmsr   r5                              # Disable interrupts
    sync
    isync
#endif
#if 0
        mfmsr   r3                     /* Disable interrupts */
	mr 	r4,r3
        li      r5,0
        ori     r5,r5,0x8000
        andc    r4,r4,r5
        sync                            /* Some chip revs need this... */
        mtmsr   r4
#endif
        #sync
    	blr

/*    	blr*/
enable_int:
	mtmsr   r3
	sync
	isync
    	blr

SetDecrementer:
	mtdec  r3
	isync
	blr
	/*lis r15,0x22*/
	#mfdec r15
redo:
        #mfspr   r15,22
	mfdec r15
	lis 11,0xa0
	stw r15,0(11)
	#mtspr 22,r3
	b redo
	blr
readtime:
	#mfdec r3
	mfmsr r3
	#mfdec r3
	blr
readtimer32:
    	mfspr   3, 268
    	blr
CPU_IntDis:
    mfmsr   r5                              # Preparation for disabling interrupts (1)
    andi.   r5,r5,0x7fff                    # Preparation for disabling interrupts : set EE (bit #16) to '0' (2)
    mtmsr   r5                              # Disable interrupts
    sync
    blr


CPU_IntEn:
    mfmsr   r5                              # Preparation for enabling interrupts (1)
    ori     r5,r5,0x8000                    # Preparation for enabling interrupts : set EE (bit #16) to '1'(2)
    sync
    isync 
    mtmsr   r5                              # Enable interrupts
    sync
    isync
    blr

        .end 
 
